-- This Document can be used for referencing MYSQL Queries for the Tripplar Database. 

-- Accounts Database
-- Creating an Account 
-- This is a Prepared Statement learn more from here https://dev.mysql.com/doc/refman/8.0/en/sql-syntax-prepared-statements.html

Set @CreateAccount = 'INSERT INTO Users (Username, FirstName, LastName) VALUES (?,?,?)';
PREPARE NewAccount FROM @CreateAccount;
Set @A = 'UsernameInput'; -- UsernameInput is a placeholder for what the user sets as the username, Needs to input as a string 
Set @B = 'FirstNameInput'; -- Firstname Input is a placeholder for User's First Name, Needs to input as a string 
Set @C = 'LastNameInput'; --LastNameInput is a placeholder for User's Last Name, Needs to input as a string
EXECUTE NewAccount USING @A, @B, @C;
DEALLOCATE PREPARE NewAccount;

-- END OF CREATE ACCOUNT 

-- VALIDATE USER INPUT 
SET @CheckValid ='SELECT EXISTS (SELECT * FROM Users WHERE Username = ?)';
PREPARE ValidLogin FROM @CheckValid;
Set @A = 'UsernameInput'; -- UsernameInput is a placeholder for the username that the User inputs, Needs to input as a string 
EXECUTE ValidLogin USING @A;
DEALLOCATE PREPARE ValidLogin; 

-- Database will return either a 0 or 1, if it's 0 it means that it does not exist, if it's 1 then it does exist, if it's 1 then it should log in with that account

-- Logging in once user input is validated 
-- Once User is logged in, the account for the client side will be set as the UserId of the corresponding ID of the username 

SET @LoginUser = 'Select UserId FROM Users WHERE Username =? INTO @CurrentUserId';
PREPARE LoginToAccount FROM @LoginUser; 
Set @A = 'UsernameInput'; -- UsernameInput is whatever the user inputted for their username 
EXECUTE LoginToAccount USING @A; -- This Sets @CurrentUserId to the UserId of the inputted Username, used for future purposes. 
Select @CurrentUserId; -- Used to check that the value has been properly updated, can be deleted. 
DEALLOCATE PREPARE LoginToAccount; 

-- User has now logged in as the current account has been set to the users account
-- User can now start interacting with suggested businsesses 
-- SQL QUERY TO PULL RANDOM BUSINESS

SELECT ID FROM Businesses Order By RAND() Limit 1 INTO @RandomBusinessId; -- Pulls a Random Business from the List of Businesses 
-- The following queries sets variables for the Business Atrributes that can be called. 
SELECT Address From Businesses Where ID = @RandomBusinessId INTO @RandomBusinessAddress; 
SELECT Rating From Businesses Where ID = @RandomBusinessId INTO @RandomBusinessRating;
SELECT Hours From Businesses Where ID = @RandomBusinessId INTO @RandomBusinessHour;
SELECT WebAddress From Businesses Where ID = @RandomBusinessId INTO @RandomWebAddress;
SELECT BusinessName From Businesses Where ID = @RandomBusinessId INTO @RandomBusinessName;
Set @RandomBusinessQueryTime = CURRENT_TIMESTAMP();
-- Following is used to test, can be deleted
SELECT @RandomBusinessName, @RandomBusinessAddress, @RandomBusinessRating, @RandomBusinessHour, @RandomWebAddress, @RandomBusinessQueryTime);

-- User has now been shown a Random Business. User now has to decide whether or not they want to accept or reject the recommendation. 
-- ADDTOSWIPELOG

-- Acceptance will be the value that will be sent from Client Side of whether the recommendation was accepted or rejected) alter
Set @RandomBusinessAccepted = TRUE;
INSERT INTO 
Swipes (UserId, BusinessId, Acceptance, SwipeTimeStart, SwipeTimeEnd) 
VALUES 
(@CurrentUserId, @RandomBusinessId, @RandomBusinessAccepted, @RandomBusinessQueryTime, CURRENT_TIMESTAMP());










